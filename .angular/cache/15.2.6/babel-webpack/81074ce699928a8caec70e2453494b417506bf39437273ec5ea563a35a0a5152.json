{"ast":null,"code":"import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: e => JSON.parse(e.data),\n  serializer: value => JSON.stringify(value)\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n  constructor(urlConfigOrSource, destination) {\n    super();\n    if (urlConfigOrSource instanceof Observable) {\n      this.destination = destination;\n      this.source = urlConfigOrSource;\n    } else {\n      const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      this._output = new Subject();\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (let key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n  lift(operator) {\n    const sock = new WebSocketSubject(this._config, this.destination);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  }\n  _resetState() {\n    this._socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject();\n  }\n  multiplex(subMsg, unsubMsg, messageFilter) {\n    const self = this;\n    return new Observable(observer => {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n      const subscription = self.subscribe(x => {\n        try {\n          if (messageFilter(x)) {\n            observer.next(x);\n          }\n        } catch (err) {\n          observer.error(err);\n        }\n      }, err => observer.error(err), () => observer.complete());\n      return () => {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n  _connectSocket() {\n    const {\n      WebSocketCtor,\n      protocol,\n      url,\n      binaryType\n    } = this._config;\n    const observer = this._output;\n    let socket = null;\n    try {\n      socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n      this._socket = socket;\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n    const subscription = new Subscription(() => {\n      this._socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n    socket.onopen = e => {\n      const {\n        _socket\n      } = this;\n      if (!_socket) {\n        socket.close();\n        this._resetState();\n        return;\n      }\n      const {\n        openObserver\n      } = this._config;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n      const queue = this.destination;\n      this.destination = Subscriber.create(x => {\n        if (socket.readyState === 1) {\n          try {\n            const {\n              serializer\n            } = this._config;\n            socket.send(serializer(x));\n          } catch (e) {\n            this.destination.error(e);\n          }\n        }\n      }, e => {\n        const {\n          closingObserver\n        } = this._config;\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n        if (e && e.code) {\n          socket.close(e.code, e.reason);\n        } else {\n          observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n        }\n        this._resetState();\n      }, () => {\n        const {\n          closingObserver\n        } = this._config;\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n        socket.close();\n        this._resetState();\n      });\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add(queue.subscribe(this.destination));\n      }\n    };\n    socket.onerror = e => {\n      this._resetState();\n      observer.error(e);\n    };\n    socket.onclose = e => {\n      this._resetState();\n      const {\n        closeObserver\n      } = this._config;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n    socket.onmessage = e => {\n      try {\n        const {\n          deserializer\n        } = this._config;\n        observer.next(deserializer(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  }\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this._socket) {\n      this._connectSocket();\n    }\n    this._output.subscribe(subscriber);\n    subscriber.add(() => {\n      const {\n        _socket\n      } = this;\n      if (this._output.observers.length === 0) {\n        if (_socket && _socket.readyState === 1) {\n          _socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscriber;\n  }\n  unsubscribe() {\n    const {\n      _socket\n    } = this;\n    if (_socket && _socket.readyState === 1) {\n      _socket.close();\n    }\n    this._resetState();\n    super.unsubscribe();\n  }\n}","map":{"version":3,"names":["Subject","AnonymousSubject","Subscriber","Observable","Subscription","ReplaySubject","DEFAULT_WEBSOCKET_CONFIG","url","deserializer","e","JSON","parse","data","serializer","value","stringify","WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT","WebSocketSubject","constructor","urlConfigOrSource","destination","source","config","_config","Object","assign","_output","key","hasOwnProperty","WebSocketCtor","WebSocket","Error","lift","operator","sock","_resetState","_socket","multiplex","subMsg","unsubMsg","messageFilter","self","observer","next","err","error","subscription","subscribe","x","complete","unsubscribe","_connectSocket","protocol","binaryType","socket","readyState","close","onopen","openObserver","queue","create","send","closingObserver","undefined","code","reason","TypeError","add","onerror","onclose","closeObserver","wasClean","onmessage","_subscribe","subscriber","observers","length"],"sources":["/home/anurag/node_modules/rxjs/_esm2015/internal/observable/dom/WebSocketSubject.js"],"sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (let key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe(x => {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, err => observer.error(err), () => observer.complete());\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (e) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (e) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            this._resetState();\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}