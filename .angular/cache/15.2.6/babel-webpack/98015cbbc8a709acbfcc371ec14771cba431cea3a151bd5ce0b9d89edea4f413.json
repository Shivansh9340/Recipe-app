{"ast":null,"code":"import { exhaustMap, map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../recipes/recipe.service\";\nimport * as i3 from \"../auth/auth.service\";\nexport class DataStorageService {\n  constructor(http, recipeService, authService) {\n    this.http = http;\n    this.recipeService = recipeService;\n    this.authService = authService;\n  }\n  storeRecipes() {\n    const recipes = this.recipeService.getRecipes();\n    this.http.put('https://recipe-424c6-default-rtdb.firebaseio.com/recipes.json', recipes).subscribe(response => {\n      console.log(response);\n    });\n  }\n  fetchRecipes() {\n    this.authService.user.pipe(take(1), exhaustMap());\n    return this.http.get('https://recipe-424c6-default-rtdb.firebaseio.com/recipes.json').pipe(map(res => {\n      const recipes = [];\n      for (const key in res) {\n        if (res.hasOwnProperty(key)) {\n          recipes.push({\n            ...res[key],\n            id: key\n          });\n        }\n      }\n      console.log(recipes);\n      return recipes;\n    }));\n  }\n}\nDataStorageService.ɵfac = function DataStorageService_Factory(t) {\n  return new (t || DataStorageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.RecipeService), i0.ɵɵinject(i3.AuthService));\n};\nDataStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataStorageService,\n  factory: DataStorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,UAAU,EAAEC,GAAG,EAACC,IAAI,QAAW,gBAAgB;;;;;AAIxD,OAAM,MAAOC,kBAAkB;EAC3BC,YAAoBC,IAAgB,EAChBC,aAA4B,EAC5BC,WAAwB;IAFxB,SAAI,GAAJF,IAAI;IACJ,kBAAa,GAAbC,aAAa;IACb,gBAAW,GAAXC,WAAW;EAC/B;EACAC,YAAY;IACR,MAAMC,OAAO,GAAG,IAAI,CAACH,aAAa,CAACI,UAAU,EAAE;IAC/C,IAAI,CAACL,IAAI,CACJM,GAAG,CACA,+DAA+D,EAC/DF,OAAO,CACV,CACAG,SAAS,CAACC,QAAQ,IAAG;MAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACzB,CAAC,CAAC;EACV;EACAG,YAAY;IACR,IAAI,CAACT,WAAW,CAACU,IAAI,CAACC,IAAI,CAAChB,IAAI,CAAC,CAAC,CAAC,EAAEF,UAAU,EAAE,CAAC;IACjD,OAAO,IAAI,CAACK,IAAI,CACXc,GAAG,CACA,+DAA+D,CAClE,CACAD,IAAI,CACDjB,GAAG,CAAEmB,GAAG,IAAI;MACR,MAAMX,OAAO,GAAG,EAAE;MAClB,KAAK,MAAMY,GAAG,IAAID,GAAG,EAAE;QACnB,IAAIA,GAAG,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;UACzBZ,OAAO,CAACc,IAAI,CAAC;YAAE,GAAGH,GAAG,CAACC,GAAG,CAAC;YAAEG,EAAE,EAAEH;UAAG,CAAE,CAAC;;;MAG9CP,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;MACpB,OAAOA,OAAO;IAEtB,CAAC,CAAC,CACL;EACL;;AAnCSN,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAsB,SAAlBtB,kBAAkB;EAAAuB,YADL;AAAM","names":["exhaustMap","map","take","DataStorageService","constructor","http","recipeService","authService","storeRecipes","recipes","getRecipes","put","subscribe","response","console","log","fetchRecipes","user","pipe","get","res","key","hasOwnProperty","push","id","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/shared/data-storage.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { RecipeService } from \"../recipes/recipe.service\";\nimport { Recipe } from '../recipes/recipe.model';\n\nimport { exhaustMap, map,take,tap} from 'rxjs/operators';\nimport { AuthService } from \"../auth/auth.service\";\n\n@Injectable({ providedIn: 'root' })\nexport class DataStorageService {\n    constructor(private http: HttpClient,\n                private recipeService: RecipeService,\n                private authService: AuthService) {\n    }\n    storeRecipes() {\n        const recipes = this.recipeService.getRecipes();\n        this.http\n            .put(\n                'https://recipe-424c6-default-rtdb.firebaseio.com/recipes.json',\n                recipes\n            )\n            .subscribe(response => {\n                console.log(response);\n            });\n    }\n    fetchRecipes() {\n        this.authService.user.pipe(take(1), exhaustMap());\n        return this.http\n            .get<Recipe[]>(\n                'https://recipe-424c6-default-rtdb.firebaseio.com/recipes.json'\n            )\n            .pipe(\n                map((res) => {\n                    const recipes = [];\n                    for (const key in res) {\n                        if (res.hasOwnProperty(key)) {\n                            recipes.push({ ...res[key], id: key });\n                        }\n                    }\n                    console.log(recipes);\n                    return recipes;\n                \n            }),\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}