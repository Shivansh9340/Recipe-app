{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Directive, HostBinding, HostListener } from \"@angular/core\";\nlet DropdownDirective = class DropdownDirective {\n  // @HostListener('click') toggleOpen(){\n  //     this.isOpen = !this.isOpen;\n  // }\n  toggleOpen(event) {\n    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n  }\n  constructor(elRef) {\n    this.elRef = elRef;\n    this.isOpen = false;\n  }\n};\n__decorate([HostBinding('class.open')], DropdownDirective.prototype, \"isOpen\", void 0);\n__decorate([HostListener('document:click', ['$event'])], DropdownDirective.prototype, \"toggleOpen\", null);\nDropdownDirective = __decorate([Directive({\n  selector: '[appDropdown]'\n})], DropdownDirective);\nexport { DropdownDirective };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,WAAW,EAAEC,YAAY,QAAQ,eAAe;AAK7D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE1B;EACA;EACA;EAC4CC,UAAU,CAACC,KAAY;IAC/D,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,CAACC,aAAa,CAACC,QAAQ,CAACJ,KAAK,CAACK,MAAM,CAAC,GAAG,CAAC,IAAI,CAACJ,MAAM,GAAG,KAAK;EACxF;EACAK,YAAoBJ,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAPE,WAAM,GAAG,KAAK;EAOA;CAC5C;AAR8BK,YAA1BX,WAAW,CAAC,YAAY,CAAC,iDAAgB;AAIEW,YAA3CV,YAAY,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,CAAC,mDAE1C;AAPQC,iBAAiB,eAH7BH,SAAS,CAAC;EACPa,QAAQ,EAAE;CACb,CAAC,GACWV,iBAAiB,CAS7B;SATYA,iBAAiB","names":["Directive","HostBinding","HostListener","DropdownDirective","toggleOpen","event","isOpen","elRef","nativeElement","contains","target","constructor","__decorate","selector"],"sourceRoot":"","sources":["/home/anurag/angular_projects/project/src/app/shared/dropdown.directive.ts"],"sourcesContent":["import { Directive, HostBinding, HostListener } from \"@angular/core\";\n\n@Directive({\n    selector: '[appDropdown]'\n})\nexport class DropdownDirective {\n    @HostBinding('class.open') isOpen = false;\n    // @HostListener('click') toggleOpen(){\n    //     this.isOpen = !this.isOpen;\n    // }\n    @HostListener('document:click', ['$event']) toggleOpen(event: Event) {\n        this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n    }\n    constructor(private elRef: ElementRef) { }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}