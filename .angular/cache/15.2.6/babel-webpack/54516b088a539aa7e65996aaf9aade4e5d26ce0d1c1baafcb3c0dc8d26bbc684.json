{"ast":null,"code":"import { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(errorRes => {\n      let errorMes = 'An error occurred!';\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMes);\n      }\n      switch (errorRes.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMes = 'Email already exists';\n          break;\n        case 'OPERATION_NOT_ALLOWED':\n          errorMes = 'Not Allowed';\n          break;\n        case 'TOO_MANY_ATTEMPTS_TRY_LATER:':\n          errorMes = 'Too many attempts try after some time.';\n          break;\n      }\n      return throwError(errorMes);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAAQC,UAAU,QAAO,MAAM;;;AAY/B,OAAM,MAAOC,WAAW;EACpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAExB;EACAC,MAAM,CAACC,KAAa,EAAEC,QAAgB;IAClC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAmB,uGAAuG,EAC/I;MACIF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACtB,CAAC,CAACC,IAAI,CAACV,UAAU,CAACW,QAAQ,IAAE;MACzB,IAAIC,QAAQ,GAAC,oBAAoB;MACjC,IAAG,CAACD,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAC;QACxC,OAAOZ,UAAU,CAACW,QAAQ,CAAC;;MAE/B,QAAOD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;QAC/B,KAAK,cAAc;UACfF,QAAQ,GAAG,sBAAsB;UACjC;QACJ,KAAK,uBAAuB;UACxBA,QAAQ,GAAG,aAAa;UACxB;QACJ,KAAK,8BAA8B;UAC/BA,QAAQ,GAAG,wCAAwC;UACnD;MAAM;MAEd,OAAOX,UAAU,CAACW,QAAQ,CAAC;IAC/B,CAAC,CAAC,CACD;EACL;EACAG,KAAK,CAACT,KAAY,EAAEC,QAAgB;IAChC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAmB,mHAAmH,EAC3J;MACIF,KAAK,EAACA,KAAK;MACXC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACtB,CAAC;EACN;;AArCSP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;EAAAe,YADC;AAAM","names":["catchError","throwError","AuthService","constructor","http","signup","email","password","post","returnSecureToken","pipe","errorRes","errorMes","error","message","login","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError } from \"rxjs/operators\";\nimport {throwError} from \"rxjs\";\n\ninterface AuthResponseData{\n    idToken: string;\n    email: string;\n    refreshToken: string;\n    expiresIn: string;\n    localId: string;\n    registered?: boolean\n}\n\n@Injectable({providedIn: 'root'})\nexport class AuthService{\n    constructor(private http: HttpClient){\n\n    }\n    signup(email: string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(errorRes=>{\n            let errorMes='An error occurred!';\n            if(!errorRes.error || !errorRes.error.error){\n                return throwError(errorMes);\n            }\n            switch(errorRes.error.error.message){\n                case 'EMAIL_EXISTS':\n                    errorMes = 'Email already exists';\n                    break;\n                case 'OPERATION_NOT_ALLOWED':\n                    errorMes = 'Not Allowed';\n                    break;\n                case 'TOO_MANY_ATTEMPTS_TRY_LATER:':\n                    errorMes = 'Too many attempts try after some time.';\n                    break;\n            }\n            return throwError(errorMes);\n        })\n        );\n    }\n    login(email:string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email:email,\n            password: password,\n            returnSecureToken: true\n        });\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}