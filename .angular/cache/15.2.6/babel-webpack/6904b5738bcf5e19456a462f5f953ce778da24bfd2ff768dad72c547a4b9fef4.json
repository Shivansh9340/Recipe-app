{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DropdownDirective {\n  // @HostListener('click') toggleOpen(){\n  //     this.isOpen = !this.isOpen;\n  // }\n  toggleOpen(event) {\n    this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n  }\n  constructor(elRef) {\n    this.elRef = elRef;\n    this.isOpen = false;\n  }\n}\nDropdownDirective.ɵfac = function DropdownDirective_Factory(t) {\n  return new (t || DropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nDropdownDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: DropdownDirective,\n  selectors: [[\"\", \"appDropdown\", \"\"]],\n  hostVars: 2,\n  hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n        return ctx.toggleOpen($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"open\", ctx.isOpen);\n    }\n  }\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,iBAAiB;EAE1B;EACA;EACA;EAC4CC,UAAU,CAACC,KAAY;IAC/D,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,KAAK,CAACC,aAAa,CAACC,QAAQ,CAACJ,KAAK,CAACK,MAAM,CAAC,GAAG,CAAC,IAAI,CAACJ,MAAM,GAAG,KAAK;EACxF;EACAK,YAAoBJ,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAPE,WAAM,GAAG,KAAK;EAOA;;AARhCJ,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAS;EAAAC;EAAAC;IAAA;;eAAjBC,sBAAkB;MAAA","names":["DropdownDirective","toggleOpen","event","isOpen","elRef","nativeElement","contains","target","constructor","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["/home/shivansh/Desktop/angular/project (3)/project/src/app/shared/dropdown.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostBinding, HostListener } from \"@angular/core\";\n\n@Directive({\n    selector: '[appDropdown]'\n})\nexport class DropdownDirective {\n    @HostBinding('class.open') isOpen = false;\n    // @HostListener('click') toggleOpen(){\n    //     this.isOpen = !this.isOpen;\n    // }\n    @HostListener('document:click', ['$event']) toggleOpen(event: Event) {\n        this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n    }\n    constructor(private elRef: ElementRef) { }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}