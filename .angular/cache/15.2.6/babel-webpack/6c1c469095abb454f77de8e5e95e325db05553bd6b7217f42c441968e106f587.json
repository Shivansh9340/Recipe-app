{"ast":null,"code":"import { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  autologin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date());\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred';\n    if (!errorRes.error || errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'Email not found';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'Password not valid';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","BehaviorSubject","throwError","User","AuthService","constructor","http","router","logout","user","next","navigate","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","autologin","userData","JSON","parse","localStorage","getItem","loadedUser","id","_token","Date","login","userId","token","expirationDate","getTime","setItem","stringify","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport {BehaviorSubject, Subject, throwError} from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\n\nexport interface AuthResponseData{\n    idToken: string;\n    email: string;\n    refreshToken: string;\n    expiresIn: string;\n    localId: string;\n    registered?: boolean\n}\n\n@Injectable({providedIn: 'root'})\nexport class AuthService{\n    user = new BehaviorSubject<User>(null);\n    constructor(private http: HttpClient,\n                private router: Router){\n    }\n    logout(){\n        this.user.next(null);\n        this.router.navigate(['/auth']);\n    }\n    signup(email: string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError),tap(resData=>{\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn)\n        }));\n    }\n    autologin(){\n        const userData: {\n            email: string;\n            id: string;\n            _token: string;\n            _tokenExpirationDate: string;\n        } = JSON.parse(localStorage.getItem('userData'));\n        if(!userData){\n            return;\n        }\n        const loadedUser = new User(userData.email, userData.id, userData._token, new Date());\n    }\n    login(email:string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email:email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError),tap(resData=>{\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n        }));\n    }\n\n    private handleAuthentication(email:string,userId: string, token:string, expiresIn:number){\n        const expirationDate = new Date(new Date().getTime() + expiresIn*1000);\n        const user = new User(email, userId, token, expirationDate);\n        this.user.next(user);\n        localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    private handleError(errorRes:HttpErrorResponse){\n        let errorMessage='An unknown error occurred';\n        if(!errorRes.error||errorRes.error.error){\n          return throwError(errorMessage);\n        }\n        switch(errorRes.error.error.message){\n          case 'EMAIL_EXISTS':\n            errorMessage='This email exists'\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage='Email not found'\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage='Password not valid'\n            break;\n           \n        }\n        return throwError(errorMessage)\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}