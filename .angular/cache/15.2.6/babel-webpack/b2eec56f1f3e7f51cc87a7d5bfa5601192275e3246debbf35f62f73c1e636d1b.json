{"ast":null,"code":"import { catchError } from \"rxjs/operators\";\nimport { Subject, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = new Subject();\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred';\n    if (!errorRes.error || errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'Email not found';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'Password not valid';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAAQC,OAAO,EAAEC,UAAU,QAAO,MAAM;;;AAaxC,OAAM,MAAOC,WAAW;EAEpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADxB,SAAI,GAAG,IAAIJ,OAAO,EAAQ;EAG1B;EACAK,MAAM,CAACC,KAAa,EAAEC,QAAgB;IAClC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAmB,uGAAuG,EAC/I;MACIF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACtB,CAAC,CAACC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACzC;EACAC,KAAK,CAACN,KAAY,EAAEC,QAAgB;IAChC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAmB,mHAAmH,EAC3J;MACIF,KAAK,EAACA,KAAK;MACXC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACtB,CAAC,CAACC,IAAI,CAACX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAAC;EACzC;EACQA,WAAW,CAACE,QAA0B;IAC1C,IAAIC,YAAY,GAAC,2BAA2B;IAC5C,IAAG,CAACD,QAAQ,CAACE,KAAK,IAAEF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAC;MACvC,OAAOd,UAAU,CAACa,YAAY,CAAC;;IAEjC,QAAOD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MACjC,KAAK,cAAc;QACjBF,YAAY,GAAC,mBAAmB;QAChC;MACF,KAAK,iBAAiB;QACpBA,YAAY,GAAC,iBAAiB;QAC9B;MACF,KAAK,kBAAkB;QACrBA,YAAY,GAAC,oBAAoB;QACjC;IAAM;IAGV,OAAOb,UAAU,CAACa,YAAY,CAAC;EACnC;;AAvCSZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAe,SAAXf,WAAW;EAAAgB,YADC;AAAM","names":["catchError","Subject","throwError","AuthService","constructor","http","signup","email","password","post","returnSecureToken","pipe","handleError","login","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError } from \"rxjs/operators\";\nimport {Subject, throwError} from \"rxjs\";\nimport { User } from \"./user.model\";\n\nexport interface AuthResponseData{\n    idToken: string;\n    email: string;\n    refreshToken: string;\n    expiresIn: string;\n    localId: string;\n    registered?: boolean\n}\n\n@Injectable({providedIn: 'root'})\nexport class AuthService{\n    user = new Subject<User>();\n    constructor(private http: HttpClient){\n\n    }\n    signup(email: string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError));\n    }\n    login(email:string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email:email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError));\n    }\n    private handleError(errorRes:HttpErrorResponse){\n        let errorMessage='An unknown error occurred';\n        if(!errorRes.error||errorRes.error.error){\n          return throwError(errorMessage);\n        }\n        switch(errorRes.error.error.message){\n          case 'EMAIL_EXISTS':\n            errorMessage='This email exists'\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage='Email not found'\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage='Password not valid'\n            break;\n           \n        }\n        return throwError(errorMessage)\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}