{"ast":null,"code":"import { catchError, tap } from \"rxjs/operators\";\nimport { Subject, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = new Subject();\n    this.token = null;\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred';\n    if (!errorRes.error || errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'Email not found';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'Password not valid';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAQC,OAAO,EAAEC,UAAU,QAAO,MAAM;AACxC,SAASC,IAAI,QAAQ,cAAc;;;AAYnC,OAAM,MAAOC,WAAW;EAGpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,SAAI,GAAG,IAAIL,OAAO,EAAQ;IAC1B,UAAK,GAAU,IAAI;EAGnB;EACAM,MAAM,CAACC,KAAa,EAAEC,QAAgB;IAClC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAmB,uGAAuG,EAC/I;MACIF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACtB,CAAC,CAACC,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAACb,GAAG,CAACc,OAAO,IAAE;MAC9C,IAAI,CAACC,oBAAoB,CAACD,OAAO,CAACN,KAAK,EAAEM,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACG,OAAO,EAAE,CAACH,OAAO,CAACI,SAAS,CAAC;IAClG,CAAC,CAAC,CAAC;EACP;EACAC,KAAK,CAACX,KAAY,EAAEC,QAAgB;IAChC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAmB,mHAAmH,EAC3J;MACIF,KAAK,EAACA,KAAK;MACXC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACtB,CAAC,CAACC,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAACb,GAAG,CAACc,OAAO,IAAE;MAC9C,IAAI,CAACC,oBAAoB,CAACD,OAAO,CAACN,KAAK,EAAEM,OAAO,CAACE,OAAO,EAAEF,OAAO,CAACG,OAAO,EAAE,CAACH,OAAO,CAACI,SAAS,CAAC;IAClG,CAAC,CAAC,CAAC;EACP;EAEQH,oBAAoB,CAACP,KAAY,EAACY,MAAc,EAAEC,KAAY,EAAEH,SAAgB;IACpF,MAAMI,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGN,SAAS,GAAC,IAAI,CAAC;IACtE,MAAMO,IAAI,GAAG,IAAItB,IAAI,CAACK,KAAK,EAAEY,MAAM,EAAEC,KAAK,EAAEC,cAAc,CAAC;IAC3D,IAAI,CAACG,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC;EACxB;EAEQZ,WAAW,CAACc,QAA0B;IAC1C,IAAIC,YAAY,GAAC,2BAA2B;IAC5C,IAAG,CAACD,QAAQ,CAACE,KAAK,IAAEF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAC;MACvC,OAAO3B,UAAU,CAAC0B,YAAY,CAAC;;IAEjC,QAAOD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MACjC,KAAK,cAAc;QACjBF,YAAY,GAAC,mBAAmB;QAChC;MACF,KAAK,iBAAiB;QACpBA,YAAY,GAAC,iBAAiB;QAC9B;MACF,KAAK,kBAAkB;QACrBA,YAAY,GAAC,oBAAoB;QACjC;IAAM;IAGV,OAAO1B,UAAU,CAAC0B,YAAY,CAAC;EACnC;;AAnDSxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YADC;AAAM","names":["catchError","tap","Subject","throwError","User","AuthService","constructor","http","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","userId","token","expirationDate","Date","getTime","user","next","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport {Subject, throwError} from \"rxjs\";\nimport { User } from \"./user.model\";\n\nexport interface AuthResponseData{\n    idToken: string;\n    email: string;\n    refreshToken: string;\n    expiresIn: string;\n    localId: string;\n    registered?: boolean\n}\n\n@Injectable({providedIn: 'root'})\nexport class AuthService{\n    user = new Subject<User>();\n    token:string = null;\n    constructor(private http: HttpClient){\n\n    }\n    signup(email: string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError),tap(resData=>{\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n        }));\n    }\n    login(email:string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email:email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError),tap(resData=>{\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n        }));\n    }\n\n    private handleAuthentication(email:string,userId: string, token:string, expiresIn:number){\n        const expirationDate = new Date(new Date().getTime() + expiresIn*1000);\n        const user = new User(email, userId, token, expirationDate);\n        this.user.next(user);\n    }\n\n    private handleError(errorRes:HttpErrorResponse){\n        let errorMessage='An unknown error occurred';\n        if(!errorRes.error||errorRes.error.error){\n          return throwError(errorMessage);\n        }\n        switch(errorRes.error.error.message){\n          case 'EMAIL_EXISTS':\n            errorMessage='This email exists'\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage='Email not found'\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage='Password not valid'\n            break;\n           \n        }\n        return throwError(errorMessage)\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}