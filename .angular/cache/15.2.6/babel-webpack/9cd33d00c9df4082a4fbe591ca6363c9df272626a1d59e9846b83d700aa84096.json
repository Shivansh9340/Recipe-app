{"ast":null,"code":"import { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  autologin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n    }\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred';\n    if (!errorRes.error || errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'Email not found';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'Password not valid';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","tap","BehaviorSubject","throwError","User","AuthService","constructor","http","router","logout","user","next","navigate","localStorage","removeItem","tokenExpirationTimer","clearTimeout","autoLogout","expirationDuration","setTimeout","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","autologin","userData","JSON","parse","getItem","loadedUser","id","_token","Date","_tokenExpirationDate","token","login","userId","expirationDate","getTime","setItem","stringify","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport {BehaviorSubject, Subject, throwError} from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\n\nexport interface AuthResponseData{\n    idToken: string;\n    email: string;\n    refreshToken: string;\n    expiresIn: string;\n    localId: string;\n    registered?: boolean\n}\n\n@Injectable({providedIn: 'root'})\nexport class AuthService{\n    user = new BehaviorSubject<User>(null);\n    private tokenExpirationTimer: any;\n    constructor(private http: HttpClient,\n                private router: Router){\n    }\n    logout(){\n        this.user.next(null);\n        this.router.navigate(['/auth']);\n        localStorage.removeItem('userData');\n        if(this.tokenExpirationTimer){\n            clearTimeout(this.tokenExpirationTimer);\n        }\n        this.tokenExpirationTimer = null;\n    }\n\n    autoLogout(expirationDuration: number){\n        this.tokenExpirationTimer = setTimeout(()=>{\n            this.logout();\n        }, expirationDuration);\n    }\n\n    signup(email: string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError),tap(resData=>{\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn)\n        }));\n    }\n    autologin(){\n        const userData: {\n            email: string;\n            id: string;\n            _token: string;\n            _tokenExpirationDate: string;\n        } = JSON.parse(localStorage.getItem('userData'));\n        if(!userData){\n            return;\n        }\n        const loadedUser = new User(\n            userData.email, \n            userData.id, \n            userData._token, \n            new Date(userData._tokenExpirationDate)\n        );\n        if(loadedUser.token){\n            this.user.next(loadedUser);\n        }\n    }\n    \n    login(email:string, password: string){\n        return this.http.post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n            email:email,\n            password: password,\n            returnSecureToken: true\n        }).pipe(catchError(this.handleError),tap(resData=>{\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n        }));\n    }\n\n    private handleAuthentication(email:string,userId: string, token:string, expiresIn:number){\n        const expirationDate = new Date(new Date().getTime() + expiresIn*1000);\n        const user = new User(email, userId, token, expirationDate);\n        this.user.next(user);\n        this.autoLogout(expiresIn*1000);\n        localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    private handleError(errorRes:HttpErrorResponse){\n        let errorMessage='An unknown error occurred';\n        if(!errorRes.error||errorRes.error.error){\n          return throwError(errorMessage);\n        }\n        switch(errorRes.error.error.message){\n          case 'EMAIL_EXISTS':\n            errorMessage='This email exists'\n            break;\n          case 'EMAIL_NOT_FOUND':\n            errorMessage='Email not found'\n            break;\n          case 'INVALID_PASSWORD':\n            errorMessage='Password not valid'\n            break;\n           \n        }\n        return throwError(errorMessage)\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}