{"ast":null,"code":"import { map, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, router) {\n    return this.authService.user.pipe(map(user => {\n      return !!user;\n    }), tap(isAuth => {\n      if (!isAuth) {\n        this.router.navigate();\n      }\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,EAAEC,GAAG,QAAQ,MAAM;;;;AAI3C,OAAM,MAAOC,SAAS;EAClBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAU;EACtEC,WAAW,CACPC,KAA6B,EAC7BF,MAA2B;IAE3B,OAAO,IAAI,CAACD,WAAW,CAACI,IAAI,CAACC,IAAI,CAACT,GAAG,CAACQ,IAAI,IAAE;MACxC,OAAO,CAAC,CAACA,IAAI;IACjB,CAAC,CAAC,EAAEP,GAAG,CAACS,MAAM,IAAE;MACZ,IAAG,CAACA,MAAM,EAAC;QACP,IAAI,CAACL,MAAM,CAACM,QAAQ,EAAE;;IAE9B,CAAC,CAAC,CACD;EACL;;AAdST,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YADE;AAAM","names":["map","tap","AuthGuard","constructor","authService","router","canActivate","route","user","pipe","isAuth","navigate","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from \"@angular/router\";\nimport { Observable, map, tap } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable({providedIn:\"root\"})\nexport class AuthGuard{\n    constructor(private authService: AuthService, private router: Router){}\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        router: RouterStateSnapshot\n    ):boolean | Promise<boolean> | Observable<boolean>{\n        return this.authService.user.pipe(map(user=>{\n            return !!user;\n        }), tap(isAuth=>{\n            if(!isAuth){\n                this.router.navigate();\n            }\n        })\n        );\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}