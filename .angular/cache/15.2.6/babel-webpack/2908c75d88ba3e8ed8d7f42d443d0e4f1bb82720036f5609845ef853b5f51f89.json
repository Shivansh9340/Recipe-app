{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = new BehaviorSubject(null);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,UAAU,EAAEC,eAAe,QAAQ,MAAM;AAElD,SAASC,IAAI,QAAQ,cAAc;;;AAanC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,SAAI,GAAG,IAAIJ,eAAe,CAAO,IAAI,CAAC;EAEC;EAEvCK,MAAM,CAACC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CACH,mHAAmH,EACnH;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF,CACAC,IAAI,CACHb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAC5Bb,GAAG,CAACc,OAAO,IAAG;MACZ,IAAI,CAACC,oBAAoB,CACvBD,OAAO,CAACN,KAAK,EACbM,OAAO,CAACE,OAAO,EACfF,OAAO,CAACG,OAAO,EACf,CAACH,OAAO,CAACI,SAAS,CACnB;IACH,CAAC,CAAC,CACH;EACL;EAEAC,KAAK,CAACX,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CACH,mHAAmH,EACnH;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF,CACAC,IAAI,CACHb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAC5Bb,GAAG,CAACc,OAAO,IAAG;MACZ,IAAI,CAACC,oBAAoB,CACvBD,OAAO,CAACN,KAAK,EACbM,OAAO,CAACE,OAAO,EACfF,OAAO,CAACG,OAAO,EACf,CAACH,OAAO,CAACI,SAAS,CACnB;IACH,CAAC,CAAC,CACH;EACL;EAEQH,oBAAoB,CAC1BP,KAAa,EACbY,MAAc,EACdC,KAAa,EACbH,SAAiB;IAEjB,MAAMI,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGN,SAAS,GAAG,IAAI,CAAC;IACxE,MAAMO,IAAI,GAAG,IAAItB,IAAI,CAACK,KAAK,EAAEY,MAAM,EAAEC,KAAK,EAAEC,cAAc,CAAC;IAC3D,IAAI,CAACG,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC;EACtB;EAEQZ,WAAW,CAACc,QAA2B;IAC7C,IAAIC,YAAY,GAAG,4BAA4B;IAC/C,IAAI,CAACD,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAE;MAC5C,OAAO5B,UAAU,CAAC2B,YAAY,CAAC;;IAEjC,QAAQD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MAClC,KAAK,cAAc;QACjBF,YAAY,GAAG,2BAA2B;QAC1C;MACF,KAAK,iBAAiB;QACpBA,YAAY,GAAG,4BAA4B;QAC3C;MACF,KAAK,kBAAkB;QACrBA,YAAY,GAAG,+BAA+B;QAC9C;IAAM;IAEV,OAAO3B,UAAU,CAAC2B,YAAY,CAAC;EACjC;;AA/EWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YADE;AAAM","names":["catchError","tap","throwError","BehaviorSubject","User","AuthService","constructor","http","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","userId","token","expirationDate","Date","getTime","user","next","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/home/anurag/Projects-Github/angular_projects/project/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\n\nimport { User } from './user.model';\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  user = new BehaviorSubject<User>(null);\n\n  constructor(private http: HttpClient) {}\n\n  signup(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }\n      )\n      .pipe(\n        catchError(this.handleError),\n        tap(resData => {\n          this.handleAuthentication(\n            resData.email,\n            resData.localId,\n            resData.idToken,\n            +resData.expiresIn\n          );\n        })\n      );\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCQLl1VXnIA_HXHDVU_Kb4GqrSi3w2wP0k',\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }\n      )\n      .pipe(\n        catchError(this.handleError),\n        tap(resData => {\n          this.handleAuthentication(\n            resData.email,\n            resData.localId,\n            resData.idToken,\n            +resData.expiresIn\n          );\n        })\n      );\n  }\n\n  private handleAuthentication(\n    email: string,\n    userId: string,\n    token: string,\n    expiresIn: number\n  ) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n  }\n\n  private handleError(errorRes: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}